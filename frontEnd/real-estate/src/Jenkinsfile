pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'frontend-serkan'
        DOCKER_REGISTRY_CREDENTIALS = 'your-docker-hub-credentials-id'
    }

    stages {
        stage('Install Node.js') {
            steps {
                script {
                    // Node.js'i yükle
                    tool name: 'node', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Node.js ve npm'i yükle
                    dir('frontEnd/real-estate') {
                        script {
                            def nodejsHome = tool 'node'
                            env.PATH = "${nodejsHome}/bin:${env.PATH}"
                            sh 'npm install'
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Uygulamayı derle
                    dir('frontEnd/real-estate') {
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Archive Build Artifacts') {
            steps {
                script {
                    // Derlenen dosyaları bir tar dosyasına arşivle
                    archiveArtifacts 'frontEnd/real-estate/build/**/*'
                }
            }
        }

        stage('Tag and Push image to Docker Hub') {
            steps {
                script {
                    // Docker imajını etiketle ve Docker Hub'a pushla
                    withDockerRegistry([credentialsId: DOCKER_REGISTRY_CREDENTIALS, url: 'https://index.docker.io/v1/']) {
                        def dockerImage = docker.build(DOCKER_IMAGE)

                        dockerImage.push("${env.BUILD_NUMBER}")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'CI/CD pipeline succeeded!'
        }
        failure {
            echo 'CI/CD pipeline failed!'
        }
    }
}
